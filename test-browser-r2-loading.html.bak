<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>R2缩略图加载测试</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            line-height: 1.6;
        }
        .test-section {
            border: 1px solid #ddd;
            padding: 15px;
            margin: 15px 0;
            border-radius: 8px;
        }
        .success { background-color: #d4edda; border-color: #c3e6cb; }
        .error { background-color: #f8d7da; border-color: #f5c6cb; }
        .info { background-color: #d1ecf1; border-color: #bee5eb; }
        .result-image {
            max-width: 300px;
            border: 2px solid #007bff;
            border-radius: 8px;
            margin: 10px 0;
        }
        pre {
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 4px;
            overflow-x: auto;
            font-size: 12px;
        }
    </style>
</head>
<body>
    <h1>🔍 R2缩略图加载诊断</h1>
    <p>测试URL: <code>https://cdn.veo3video.me/thumbnails/56717878-bb2e-4d67-a3d3-e9a5bf00f79a-v2.png</code></p>
    
    <div id="results"></div>
    
    <script>
        const testUrl = 'https://cdn.veo3video.me/thumbnails/56717878-bb2e-4d67-a3d3-e9a5bf00f79a-v2.png';
        const resultsDiv = document.getElementById('results');
        
        function addResult(title, content, type = 'info') {
            const section = document.createElement('div');
            section.className = `test-section ${type}`;
            section.innerHTML = `
                <h3>${title}</h3>
                <div>${content}</div>
            `;
            resultsDiv.appendChild(section);
        }
        
        // 测试1: 基本可访问性
        async function testBasicAccess() {
            try {
                const response = await fetch(testUrl, { method: 'HEAD' });
                const info = {
                    status: response.status,
                    statusText: response.statusText,
                    ok: response.ok,
                    headers: {
                        'content-type': response.headers.get('content-type'),
                        'content-length': response.headers.get('content-length'),
                        'access-control-allow-origin': response.headers.get('access-control-allow-origin')
                    }
                };
                
                addResult(
                    '✅ Step 1: 基本可访问性测试', 
                    `<pre>${JSON.stringify(info, null, 2)}</pre>`,
                    'success'
                );
                return true;
            } catch (error) {
                addResult(
                    '❌ Step 1: 基本可访问性测试', 
                    `<pre>错误: ${error.message}</pre>`,
                    'error'
                );
                return false;
            }
        }
        
        // 测试2: 完整数据获取
        async function testDataRetrieval() {
            try {
                const response = await fetch(testUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': 'image/*,*/*;q=0.8',
                        'Cache-Control': 'no-cache'
                    },
                    mode: 'cors',
                    credentials: 'omit'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const blob = await response.blob();
                const info = {
                    response: {
                        status: response.status,
                        ok: response.ok,
                        type: response.type
                    },
                    blob: {
                        size: blob.size + ' bytes',
                        sizeKB: (blob.size / 1024).toFixed(2) + ' KB',
                        type: blob.type,
                        isEmpty: blob.size === 0
                    }
                };
                
                addResult(
                    '✅ Step 2: 完整数据获取测试', 
                    `<pre>${JSON.stringify(info, null, 2)}</pre>`,
                    'success'
                );
                
                return blob;
            } catch (error) {
                addResult(
                    '❌ Step 2: 完整数据获取测试', 
                    `<pre>错误: ${error.message}</pre>`,
                    'error'
                );
                return null;
            }
        }
        
        // 测试3: Base64转换
        async function testBase64Conversion(blob) {
            if (!blob) {
                addResult(
                    '⏭️ Step 3: Base64转换测试', 
                    '跳过，因为blob获取失败',
                    'info'
                );
                return null;
            }
            
            try {
                const base64 = await new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = () => resolve(reader.result);
                    reader.onerror = () => reject(reader.error);
                    reader.readAsDataURL(blob);
                });
                
                const info = {
                    length: base64.length,
                    lengthKB: (base64.length / 1024).toFixed(2) + ' KB',
                    startsWithData: base64.startsWith('data:'),
                    mimeType: base64.split(';')[0].split(':')[1],
                    preview: base64.substring(0, 100) + '...'
                };
                
                addResult(
                    '✅ Step 3: Base64转换测试', 
                    `<pre>${JSON.stringify(info, null, 2)}</pre>`,
                    'success'
                );
                
                return base64;
            } catch (error) {
                addResult(
                    '❌ Step 3: Base64转换测试', 
                    `<pre>错误: ${error.message}</pre>`,
                    'error'
                );
                return null;
            }
        }
        
        // 测试4: 图片显示
        function testImageDisplay(base64) {
            if (!base64) {
                addResult(
                    '⏭️ Step 4: 图片显示测试', 
                    '跳过，因为Base64转换失败',
                    'info'
                );
                return;
            }
            
            const img = document.createElement('img');
            img.src = base64;
            img.className = 'result-image';
            img.onload = () => {
                addResult(
                    '✅ Step 4: 图片显示测试', 
                    `图片成功显示，尺寸: ${img.naturalWidth} x ${img.naturalHeight}<br>${img.outerHTML}`,
                    'success'
                );
            };
            img.onerror = () => {
                addResult(
                    '❌ Step 4: 图片显示测试', 
                    '图片无法显示',
                    'error'
                );
            };
        }
        
        // 测试5: 模拟newImageCache.ts的getImageAsBase64函数
        async function testGetImageAsBase64Simulation() {
            console.log('[NewImageCache] 📡 获取图片数据:', testUrl.substring(0, 60) + '...')
            
            try {
                // 检查网络状态
                if (typeof navigator !== 'undefined' && 'onLine' in navigator && !navigator.onLine) {
                    throw new Error('网络离线状态')
                }
                
                // 创建带超时的fetch请求
                const controller = new AbortController()
                const timeoutId = setTimeout(() => controller.abort(), 10000) // 10秒超时
                
                const response = await fetch(testUrl, {
                    method: 'GET',
                    headers: {
                        'Accept': 'image/*,*/*;q=0.8',
                        'Cache-Control': 'no-cache'
                    },
                    signal: controller.signal,
                    mode: 'cors',
                    credentials: 'omit'
                })
                
                clearTimeout(timeoutId)
                
                // 响应状态检查
                const responseInfo = {
                    status: response.status,
                    statusText: response.statusText,
                    contentType: response.headers.get('content-type'),
                    contentLength: response.headers.get('content-length')
                };
                console.log('[NewImageCache] 📊 响应状态:', responseInfo);
                
                if (!response.ok) {
                    throw new Error(`HTTP错误 ${response.status}: ${response.statusText}`)
                }
                
                const blob = await response.blob()
                
                // 验证blob数据
                if (!blob || blob.size === 0) {
                    throw new Error('获取到空的图片数据')
                }
                
                const base64 = await new Promise((resolve, reject) => {
                    const reader = new FileReader()
                    reader.onload = () => resolve(reader.result)
                    reader.onerror = () => reject(reader.error)
                    reader.readAsDataURL(blob)
                })
                
                // 验证Base64数据
                if (!base64 || !base64.startsWith('data:')) {
                    throw new Error('Base64转换失败或格式错误')
                }
                
                const sizeKB = blob.size / 1024
                const resultInfo = {
                    originalSize: `${sizeKB.toFixed(2)}KB`,
                    mimeType: blob.type,
                    base64Size: `${(base64.length / 1024).toFixed(2)}KB`,
                    quality: sizeKB > 50 ? '✅ 高质量' : sizeKB > 20 ? '🟡 中等质量' : '⚠️ 低质量'
                };
                console.log('[NewImageCache] ✅ 图片数据获取成功:', resultInfo);
                
                addResult(
                    '✅ Step 5: getImageAsBase64函数模拟测试', 
                    `<pre>响应状态: ${JSON.stringify(responseInfo, null, 2)}\n\n结果信息: ${JSON.stringify(resultInfo, null, 2)}</pre>`,
                    'success'
                );
                
                return base64;
                
            } catch (error) {
                const errorType = error instanceof Error ? error.name : 'UnknownError';
                const errorMessage = error instanceof Error ? error.message : String(error);
                
                console.error('[NewImageCache] ❌ 获取图片失败:', {
                    url: testUrl.substring(0, 60) + '...',
                    errorType,
                    errorMessage
                });
                
                addResult(
                    '❌ Step 5: getImageAsBase64函数模拟测试', 
                    `<pre>错误类型: ${errorType}\n错误信息: ${errorMessage}</pre>`,
                    'error'
                );
                
                return null;
            }
        }
        
        // 运行所有测试
        async function runAllTests() {
            addResult('🚀 开始诊断', '正在运行所有测试...', 'info');
            
            const step1Success = await testBasicAccess();
            const blob = await testDataRetrieval();
            const base64 = await testBase64Conversion(blob);
            testImageDisplay(base64);
            await testGetImageAsBase64Simulation();
            
            addResult(
                '🎯 诊断总结', 
                `
                <ul>
                    <li><strong>基本可访问性</strong>: ${step1Success ? '✅ 成功' : '❌ 失败'}</li>
                    <li><strong>数据获取</strong>: ${blob ? '✅ 成功' : '❌ 失败'}</li>
                    <li><strong>Base64转换</strong>: ${base64 ? '✅ 成功' : '❌ 失败'}</li>
                    <li><strong>图片显示</strong>: ${base64 ? '✅ 成功' : '❌ 失败'}</li>
                </ul>
                <p><strong>结论</strong>: ${
                    step1Success && blob && base64 
                    ? '✅ 图片可以正常加载和缓存，问题可能在于其他逻辑层面' 
                    : '❌ 图片加载过程中存在技术问题'
                }</p>
                `,
                step1Success && blob && base64 ? 'success' : 'error'
            );
        }
        
        // 页面加载完成后运行测试
        document.addEventListener('DOMContentLoaded', runAllTests);
    </script>
</body>
</html>